<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo" 
	xmlns:gpslogservice="services.gpslogservice.*" 
	xmlns:trackservice="services.trackservice.*" 
	xmlns:riderservice="services.riderservice.*">
	
	<fx:Script>
		<![CDATA[
			import util.IntersectionUtils;
			import mx.events.FlexEvent;
			import mx.controls.Alert;

			[Bindable]
			private var laptimes: ArrayCollection;

			[Bindable]
			private var markers: ArrayCollection;

			[Bindable] 
			private var thedata: Vector.<Number>;

			[Bindable]
			private var gpsLines: Vector.<GpsLine>;

			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void {
				findAllResult.token = gpslogService.findAll();
			}
			
			private function filterGpslogs(item:Object) : Boolean {
				var result: Boolean = true;
				if (cb_riders.selectedIndex >= 0) {
					result &&= cb_riders.selectedItem.rider_id == item.rider_id;
				}
				if (cb_tracks.selectedIndex >= 0) {
					result &&= cb_tracks.selectedItem.track_id == item.track_id;
				}
				if (cb_dates.selectedIndex >= 0) {
					result &&= cb_dates.selectedItem == item.date;
				}
				return result;
			}

			private function riderLabel(item:Object, column:DataGridColumn) : String {
				if (item != null) {
					return item.rider_firstname + " " + item.rider_lastname;
				} else {
					return "";
				}
				
			}

			protected function dropDownList_creationCompleteHandler(event:FlexEvent):void {
				findAllDatesResult.token = gpslogService.findAllDates();
			}
			
			public function createSectionColumns() : void {
				var columns: Array = laptimesGrid.columns;
				while (columns.length - 2 > markers.length) {
					columns.pop();
				}
				while (columns.length - 2 < markers.length) {
					var column: DataGridColumn = new DataGridColumn();
					column.dataField = "section_" + (columns.length - 2);
					column.headerText = "Section " + (columns.length - 1);
					column.labelFunction = timeLabelFunction;
					column.width = 64;
					columns.push(column);
				}
				laptimesGrid.columns = columns;
			}

			public function calculateLaptimes() : void {
				laptimes = new ArrayCollection();
				
				var ts0: int = -1;
				var ts1: int = -1;
				var ts2: int = -1;
				
				var index: int = 0;
				var sections: Array = new Array();
				for (var i: int = 0; i < gpsLines.length-1; i += 1) {
					var pt1: Point = new Point(thedata[i*2], thedata[i*2+1]);
					var pt2: Point = new Point(thedata[i*2+2], thedata[i*2+3]);
					for (var j: int = 0; j < markers.length; j++) {
						var marker: IntersectionMarker = IntersectionMarker(markers.getItemAt(j));
						var ip1: Point = new Point(marker.x1, marker.y1);
						var ip2: Point = new Point(marker.x2, marker.y2);
						
						if (IntersectionUtils.intersects(pt1, pt2, ip2, ip1)) {
							ts1 = gpsLines[i].time;
							if (ts2 >= 0) {
								sections[j] = ts1 - ts2;
							}
							ts2 = ts1;
							if (j == 0) {
								if (ts0 >= 0) {
									var row: Object = {
										index: index,
										laptime: ts1 - ts0
									};
									for (var k: int=0; k < markers.length; k++) {
										row["section_"+k] = sections[k];
									}
									laptimes.addItem(row);
									index++;
								}
								sections = new Array();
								ts0 = ts1;
							}
						}
					}
				}
			}
			
			protected function timeLabelFunction(item:Object, column:DataGridColumn): String {
				var value: int = int(item[column.dataField]);
				var minutes: int = Math.floor(value / 1000.0 / 60.0);
				value -= minutes * 1000 * 60;
				var seconds: int = Math.floor(value / 1000.0);
				value -= seconds * 1000;
				return minutes + ":" + pad(seconds,2) + "." + pad(value,3);
			}
			
			protected function pad(value: int, n: int): String {
				var result: String = String(value);
				while (result.length < n) {
					result = "0" + result;
				}
				return result;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder id="findAllResult"/>
		<gpslogservice:GpslogService 
			id="gpslogService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="findAllTracks"/>
		<s:CallResponder id="findAllRiders"/>
		<trackservice:TrackService 
			id="trackService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true" />
		<riderservice:RiderService
			id="riderService"
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true" />
		
		<mx:ArrayCollection
			id="gpslogs"
			filterFunction="filterGpslogs" 
			list="{findAllResult.lastResult}" />
		<s:CallResponder id="findAllDatesResult"/>

	</fx:Declarations>
	
	<mx:Form>
		<mx:FormItem label="Rider" direction="horizontal">
			<s:DropDownList 
				id="cb_riders"
				width="160"
				prompt="Select one ..."
				dataProvider="{findAllRiders.lastResult}"
				change="gpslogs.refresh()"
				creationComplete="findAllRiders.token = riderService.findAll();"
				labelField="firstname" />
			<s:Button label="All" click="cb_riders.selectedIndex = -1" />
		</mx:FormItem>
		<mx:FormItem label="Track" direction="horizontal">
			<s:DropDownList 
				id="cb_tracks"
				width="160"
				prompt="Select one ..."
				dataProvider="{findAllTracks.lastResult}"
				change="gpslogs.refresh()"
				creationComplete="findAllTracks.token = trackService.findAll();"
				labelField="name" />
			<s:Button label="All" click="cb_tracks.selectedIndex = -1" />
		</mx:FormItem>
		<mx:FormItem label="Date" direction="horizontal">
			<s:DropDownList 
				id="cb_dates" 
				creationComplete="dropDownList_creationCompleteHandler(event)" 
				dataProvider="{findAllDatesResult.lastResult}" 
				change="gpslogs.refresh()"
				prompt="Select one ..." />
			<s:Button label="All" click="cb_dates.selectedIndex = -1" />
		</mx:FormItem>
	</mx:Form>
	
	<mx:DataGrid 
		id="dataGrid" 
		creationComplete="dataGrid_creationCompleteHandler(event)" 
		dataProvider="{gpslogs}">
		<mx:columns>
			<mx:DataGridColumn headerText="gpslog_id" dataField="gpslog_id" visible="false"/>
			<mx:DataGridColumn headerText="Rider" labelFunction="riderLabel"/>
			<mx:DataGridColumn headerText="Track" dataField="track_name"/>
			<mx:DataGridColumn headerText="Date" dataField="date"/>
			<mx:DataGridColumn headerText="Start time" dataField="start_time"/>
			<mx:DataGridColumn headerText="End time" dataField="end_time"/>
		</mx:columns>
	</mx:DataGrid>
	
	<mx:DataGrid
		id="laptimesGrid"
		dataProvider="{laptimes}">
		<mx:columns>
			<mx:DataGridColumn 
				headerText="Index" 
				dataField="index" 
				width="44"/>
			<mx:DataGridColumn 
				headerText="Laptime" 
				dataField="laptime" 
				width="80" 
				labelFunction="timeLabelFunction"/>
		</mx:columns>
	</mx:DataGrid>

	<s:Button 
		label="Laptimes"
		click="calculateLaptimes()"/>
	
</s:VGroup>
