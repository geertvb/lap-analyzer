<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:gpslogservice="services.gpslogservice.*" 
	xmlns:trackservice="services.trackservice.*" 
	xmlns:riderservice="services.riderservice.*" xmlns:timingservice="services.timingservice.*">
	
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			
			import components.CustomGridItemRenderer;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import util.IntersectionUtils;
			import util.TimeUtils;
			
			private var riderMarker: RiderMarker = new RiderMarker();
			
			public var projection: Projection;
			
			private var bi: int;
			
			private var lapspeeds: ArrayCollection;

			[Bindable]
			private var laptimes: ArrayCollection;

			[Bindable]
			private var intersections: ArrayCollection;

			[Bindable]
			private var markers: ArrayCollection;

			[Bindable] 
			private var thedata: Vector.<Number>;

			[Bindable]
			private var gpsLines: Vector.<GpsLine>;

			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void {
				findAllResult.token = gpslogService.findAll();
			}
			
			private function filterGpslogs(item:Object) : Boolean {
				var result: Boolean = true;
				if (cb_riders.selectedIndex >= 0) {
					result &&= cb_riders.selectedItem.rider_id == item.rider_id;
				}
				if (cb_tracks.selectedIndex >= 0) {
					result &&= cb_tracks.selectedItem.track_id == item.track_id;
				}
				if (cb_dates.selectedIndex >= 0) {
					result &&= cb_dates.selectedItem == item.date;
				}
				return result;
			}

			private function riderLabel(item:Object, column:DataGridColumn) : String {
				if (item != null) {
					return item.rider_firstname + " " + item.rider_lastname;
				} else {
					return "";
				}
				
			}

			protected function dropDownList_creationCompleteHandler(event:FlexEvent):void {
				findAllDatesResult.token = gpslogService.findAllDates();
			}
			
			public function createSectionColumns() : void {
				var columns: Array = laptimesGrid.columns;
				while (columns.length - 2 > markers.length) {
					columns.pop();
				}
				while (columns.length - 2 < markers.length) {
					var column: DataGridColumn = new DataGridColumn();
					column.dataField = "section_" + (columns.length - 2);
					column.headerText = "Section " + (columns.length - 1);
					column.labelFunction = timeLabelFunction;
					column.width = 64;
					column.itemRenderer = new ClassFactory(CustomGridItemRenderer);
					columns.push(column);
				}
				laptimesGrid.columns = columns;
			}
			
			public function loadLaptimes() : void {
				findByGpslogID.token = timingService.findByGpslogID(dataGrid.selectedItem.gpslog_id);
			}

			public function calculateLaptimes() : void {
				laptimes = new ArrayCollection();
				lapspeeds = new ArrayCollection();
				var bestValue: Object = new Object();
				var bestIndex: Object = new Object();
				
				var ts0: Number = -1;
				var ts1: Number = -1;
				var ts2: Number = -1;
				
				var i0: Number = -1;
				bi = -1;
				var bt: Number = Number.MAX_VALUE;
				
				var index: int = 0;
				var sections: Array = new Array();
				for (var i: int = 0; i < gpsLines.length-1; i += 1) {
					var pt1: Point = new Point(thedata[i*2], thedata[i*2+1]);
					var pt2: Point = new Point(thedata[i*2+2], thedata[i*2+3]);
					for (var j: int = 0; j < markers.length; j++) {
						var marker: IntersectionMarker = IntersectionMarker(markers.getItemAt(j));
						var ip1: Point = new Point(marker.x1, marker.y1);
						var ip2: Point = new Point(marker.x2, marker.y2);
						
						if (IntersectionUtils.intersects(pt1, pt2, ip2, ip1)) {
							var a: Number = IntersectionUtils.intersectionFactor(ip2, ip1, pt1, pt2);
							ts1 = gpsLines[i].time + a * (gpsLines[i+1].time - gpsLines[i].time);
							if (ts2 >= 0) {
								sections[j] = ts1 - ts2;
							}
							ts2 = ts1;
							if (j == 0) {
								if (ts0 >= 0) {
									var row: Object = {
										index: index,
										laptime: ts1 - ts0
									};
									if (ts1-ts0 < bt) {
										bt = ts1 - ts0;
										bi = index;
									}
									for (var k: int=0; k < markers.length; k++) {
										row["section_"+k] = sections[k];
									}
									laptimes.addItem(row);
									index++;
									lapspeeds.addItem({i0: i0, i1: i});
								}
								sections = new Array();
								ts0 = ts1;
								i0 = i;
							}
						}
					}
				}
			}
			
			public function timeLabelFunction(item:Object, column:DataGridColumn): String {
				var value: int = int(item[column.dataField]);
				return TimeUtils.intToTime(value);
			}
			
			public function fault(event : FaultEvent) : void {
				Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)
			}
			
			public function dataReady(s: String) : void {
				if (s != null) {
					var lines: Array = s.split("\n");
					var iterator: GpsLineIterator = new GpsLineIterator(lines);
					
					var bounds: LatLngBounds = new LatLngBounds();
					var points: Array = new Array();
					gpsLines = new Vector.<GpsLine>();

					while (iterator.hasNext()) {
						var gpsLine: GpsLine = iterator.next();
						var latLng: LatLng = new LatLng(gpsLine.lat, gpsLine.lng);
						bounds.extend(latLng);
						points.push(latLng);
						gpsLines.push(gpsLine);
					}
					
					projection = new Projection();
					projection.bounds = bounds;
					projection.fit(640,480);
					riderMarker.projection = projection;
					riderMarker.parent = c1;
					
					thedata = new Vector.<Number>();
					for each (var ll: LatLng in points) {
						var p2: Point = projection.latLng2xy(ll);
						thedata.push(p2.x);
						thedata.push(p2.y);
					}
					
					var commands: Vector.<int> = new Vector.<int>();
					commands.push(GraphicsPathCommand.MOVE_TO);
					for (var i: int = 2; i < thedata.length; i += 2) {
						commands.push(GraphicsPathCommand.LINE_TO);
					}
					
					c1.removeAllChildren();
					c1.graphics.clear();
					c1.graphics.lineStyle(1,0,1);
					c1.graphics.drawPath(commands, thedata);
				} else {
					c1.removeAllChildren();
					c1.graphics.clear();
				}
			}

			protected function result_findByGpslogID(event: ResultEvent) : void {
				dataReady(event.result.data);
				intersections = new ArrayCollection(event.result.intersections);
				showmarkers();
				createSectionColumns();
				calculateLaptimes();
				//laptimesGrid.selectedIndex = bi;
				//laptimesGrid.scrollToIndex(laptimesGrid.selectedIndex);
			}

			protected function showmarkers() : void {
				markers = new ArrayCollection();
				for each (var intersection: Object in intersections) {
					var marker: IntersectionMarker = new IntersectionMarker();
					marker.latLng = new LatLng(intersection.lat, intersection.lng);
					marker.angle = intersection.angle;
					marker.labelText = "" + intersection.index;
					marker.parent = c1;
					marker.projection = projection;
					marker.draw();
					markers.addItem(marker);
				}
				
			}
			
			protected function zoomSlider_changeHandler(event:Event):void {
				var scaleFactor: Number = zoomSlider.value;
				c1.scaleX = scaleFactor;
				c1.scaleY = scaleFactor;
			}


			protected function laptimesGrid_changeHandler(event:ListEvent):void {
				if (laptimesGrid.selectedIndex >= 0) {
					var o: Object = lapspeeds.getItemAt(laptimesGrid.selectedIndex);
					
					var data: Vector.<Number> = new Vector.<Number>();
					var cmd: Vector.<int> = new Vector.<int>();
					var xcoo: Number = 0.0;
					for (var i: int = o.i0; i < o.i1; i++) {
						if (i == o.i0) {
							cmd.push(GraphicsPathCommand.MOVE_TO);
						} else {
							cmd.push(GraphicsPathCommand.LINE_TO);
						}
						var gpsLine: GpsLine = gpsLines[i];
						data.push(xcoo);
						data.push(c2.height - gpsLine.speed / 2);
						xcoo = xcoo + gpsLine.speed / 100.0;
					}

					c2.removeAllChildren();
					c2.graphics.clear();
					
					c2.graphics.beginFill(0xFFFFFF);
					c2.graphics.drawRect(0, 0, c2.width, c2.height);
					
					c2.graphics.lineStyle(1,0,1);
					c2.graphics.drawPath(cmd, data);
					
					c2.graphics.lineStyle(1,0,0.2);
					c2.graphics.moveTo(0, c2.height - 100/2);
					c2.graphics.lineTo(c2.width, c2.height - 100/2);
					
					c2.graphics.lineStyle(1,0,0.2);
					c2.graphics.moveTo(0, c2.height - 100);
					c2.graphics.lineTo(c2.width, c2.height - 100);
				}
			}


			protected function c2_mouseMoveHandler(event:MouseEvent):void {
				if (laptimesGrid.selectedIndex >= 0) {
					var o: Object = lapspeeds.getItemAt(laptimesGrid.selectedIndex);
					var i: int = o.i0 + event.localX;
					var gpsLine: GpsLine = gpsLines[i];
					riderMarker.draw(new LatLng(gpsLine.lat, gpsLine.lng));
					speedLabel.text = "Speed: " + gpsLine.speed + " km/h";
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder id="findAllResult"/>

		<s:CallResponder id="findAllTracks"/>
		<s:CallResponder id="findAllRiders"/>
		<s:CallResponder
			id="findByGpslogID"
			result="result_findByGpslogID(event)"/>

		<timingservice:TimingService
			id="timingService"
			fault="fault(event)" 
			showBusyCursor="true"/>
		<gpslogservice:GpslogService 
			id="gpslogService" 
			fault="fault(event)" 
			showBusyCursor="true"/>
		<trackservice:TrackService 
			id="trackService" 
			fault="fault(event)" 
			showBusyCursor="true" />
		<riderservice:RiderService
			id="riderService"
			fault="fault(event)" 
			showBusyCursor="true" />
		
		<mx:ArrayCollection
			id="gpslogs"
			filterFunction="filterGpslogs" 
			list="{findAllResult.lastResult}" />
		
		<s:CallResponder id="findAllDatesResult"/>

	</fx:Declarations>

	<s:HGroup>
		<s:VGroup>
			
		<mx:Form>
			<mx:FormItem label="Rider" direction="horizontal">
				<s:DropDownList 
					id="cb_riders"
					width="160"
					prompt="Select one ..."
					dataProvider="{findAllRiders.lastResult}"
					change="gpslogs.refresh()"
					creationComplete="findAllRiders.token = riderService.findAll();"
					labelField="firstname" />
				<s:Button label="All" click="cb_riders.selectedIndex = -1" />
			</mx:FormItem>
			<mx:FormItem label="Track" direction="horizontal">
				<s:DropDownList 
					id="cb_tracks"
					width="160"
					prompt="Select one ..."
					dataProvider="{findAllTracks.lastResult}"
					change="gpslogs.refresh()"
					creationComplete="findAllTracks.token = trackService.findAll();"
					labelField="name" />
				<s:Button label="All" click="cb_tracks.selectedIndex = -1" />
			</mx:FormItem>
			<mx:FormItem label="Date" direction="horizontal">
				<s:DropDownList 
					id="cb_dates" 
					creationComplete="dropDownList_creationCompleteHandler(event)" 
					dataProvider="{findAllDatesResult.lastResult}" 
					change="gpslogs.refresh()"
					prompt="Select one ..." />
				<s:Button label="All" click="cb_dates.selectedIndex = -1" />
			</mx:FormItem>
		</mx:Form>
		
		<mx:DataGrid 
			id="dataGrid" 
			creationComplete="dataGrid_creationCompleteHandler(event)" 
			dataProvider="{gpslogs}">
			<mx:columns>
				<mx:DataGridColumn headerText="gpslog_id" dataField="gpslog_id" visible="false"/>
				<mx:DataGridColumn headerText="Rider" labelFunction="riderLabel" width="128" />
				<mx:DataGridColumn headerText="Track" dataField="track_name" width="128" />
				<mx:DataGridColumn headerText="Date" dataField="date" width="80" />
				<mx:DataGridColumn headerText="Start time" dataField="start_time" width="64" />
				<mx:DataGridColumn headerText="End time" dataField="end_time" width="64" />
			</mx:columns>
		</mx:DataGrid>
		<s:Button 
			label="Calculate laptimes"
			enabled="{dataGrid.selectedIndex >= 0}"
			click="loadLaptimes()"/>
		
		<mx:DataGrid
			id="laptimesGrid"
			change="laptimesGrid_changeHandler(event)"
			dataProvider="{laptimes}">
			<mx:columns>
				<mx:DataGridColumn 
					headerText="Index" 
					dataField="index" 
					width="44"/>
				<mx:DataGridColumn 
					headerText="Laptime" 
					dataField="laptime" 
					width="80"
					itemRenderer="components.CustomGridItemRenderer"
					labelFunction="timeLabelFunction" />
			</mx:columns>
		</mx:DataGrid>
	
		</s:VGroup>
		
		<s:HGroup>
			
			<s:BorderContainer>
				<s:Scroller 
					verticalScrollPolicy="on"
					horizontalScrollPolicy="on">
					<s:Group 
						width="640" height="480">
						<mx:Canvas
							verticalScrollPolicy="off"
							horizontalScrollPolicy="off"
							width="640" height="480" 
							id="c1" />
					</s:Group>
				</s:Scroller>
			</s:BorderContainer>
			
			<s:HGroup>
				<s:VSlider 
					id="zoomSlider"
					change="zoomSlider_changeHandler(event)"
					minimum="1"
					maximum="4"
					stepSize="0.1" snapInterval="0.1"/>
			</s:HGroup>
	
		</s:HGroup>
	</s:HGroup>
	
	<s:BorderContainer>
		<mx:Canvas
			verticalScrollPolicy="off"
			horizontalScrollPolicy="off"
			width="1280" height="150" 
			mouseMove="c2_mouseMoveHandler(event)"
			id="c2" />
	</s:BorderContainer>
	<s:Label id="speedLabel" />

</s:VGroup>
