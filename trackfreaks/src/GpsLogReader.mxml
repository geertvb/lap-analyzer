<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/halo" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:net="flash.net.*" xmlns:trackservice="services.trackservice.*" xmlns:riderservice="services.riderservice.*" xmlns:gpslogservice="services.gpslogservice.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import valueObjects.Track;
			private var processGpsLine: Function;
			
			[Bindable]
			private var sessions: ArrayCollection = new ArrayCollection();
			
			private var i0: uint;
			private var i1: uint;

			private var t0: Number;
			private var t1: Number;
			
			private var pt: Number;
			
			private var iterator: GpsLineIterator
			
			public function pglWaiting(gpsLine: GpsLine) : void {
				if (gpsLine == null) {
					processGpsLine = pglFinished;
					return;
				}
				if (gpsLine.speed >= 25) {
					// Mark start
					i0 = gpsLine.index;
					t0 = gpsLine.time;
					processGpsLine = pglInitiating;
					return;
				}
			}
			
			public function pglInitiating(gpsLine: GpsLine) : void {
				if (gpsLine == null) {
					processGpsLine = pglFinished;
					return;
				}
				if (gpsLine.time > pt + 3000) {
					processGpsLine = pglWaiting;
					return;
				}
				if (gpsLine.speed < 25) {
					processGpsLine = pglWaiting;
					return;
				}
				if (gpsLine.time >= t0 + 3000) {
					// 
					processGpsLine = pglProcessing;
					return;
				}
			}
			
			public function pglProcessing(gpsLine: GpsLine) : void {
				if (gpsLine == null) {
					// Store session
					storeSession();
					processGpsLine = pglFinished;
					return;
				}
				if (gpsLine.time > pt + 5000) {
					// Store session
					storeSession();
					processGpsLine = pglWaiting;
					return;
				}
				if (gpsLine.speed < 10) {
					processGpsLine = pglFinalizing;
					return;
				}
				i1 = gpsLine.index;
				t1 = gpsLine.time;
			}
			
			public function pglFinalizing(gpsLine: GpsLine) : void {
				if (gpsLine == null) {
					// Store session
					storeSession();
					processGpsLine = pglFinished;
					return;
				}
				if (gpsLine.time >= t1 + 5000) {
					// Store session
					storeSession();
					processGpsLine = pglWaiting;
					return;
				}
				if (gpsLine.speed >= 10) {
					processGpsLine = pglProcessing;
					return;
				}
			}
			
			public function pglFinished(gpsLine: GpsLine) : void {
				// Do nothing
			}
			
			public function storeSession() : void {
				var l0: GpsLine = iterator.getGpsLine(i0);
				var l1: GpsLine = iterator.getGpsLine(i1);
				var i2: uint = uint((i0 + i1) / 2);
				var l2: GpsLine = iterator.getGpsLine(i2);
				sessions.addItem({
					save: (l1.time - l0.time) >= 5*60*1000,
					startIndex: i0, 
					endIndex: i1, 
					t0: new Date(l0.time), 
					t1: new Date(l1.time),
					data: iterator.lines.slice(i0, i1).join("\n")});
				var w: Number = 2.5 * 360 / 44000;
				var h: Number = 2.5 * 360 / 44000;
				findByLatLng.token = trackService.findByLatLng(l0.lat - w, l0.lng - h, l0.lat + w, l0.lng + h);
				df_GpsLogDate.selectedDate = new Date(l0.time);
			}
			
			public function dataReady(data: ByteArray) : void {
				var s: String = String(data);
				var lines: Array = s.split("\n");
				var gpsLine: GpsLine;

				iterator = new GpsLineIterator(lines);
				
				sessions.removeAll();
				processGpsLine = pglWaiting;
				do {
					gpsLine = iterator.next();
					processGpsLine(gpsLine);
					if (gpsLine != null) {
						pt = gpsLine.time;
					}
				} while (gpsLine != null);
				
			}
			
			public function findTrackIndex(track: Track) : int {
				if (track != null) {
					for (var i: int = 0; i < cb_tracks.dataProvider.length; i++) {
						if (track.track_id == cb_tracks.dataProvider.getItemAt(i).track_id) {
							return i;
						}
					}
				}
				return -1;
			}
			
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import services.gpslogservice.GpslogService;
			import mx.rpc.events.ResultEvent;
		
			import mx.core.Application;
			import mx.controls.Alert;
			
			public function onLoadProgress(event : ProgressEvent) : void {
				progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			public function onLoadComplete(event : Event) : void {
				dataReady(fileReference.data);
			}
			
			public function onLoadIoError(event : IOErrorEvent) : void {
				Alert.show(event.text);
			}
			
			public function onSelect(event: Event) : void {
				fileReference.load();
			}
			
			public function click_load(event : Event) : void {
				fileReference.browse();
			}
			
			private function click_cancel(event : Event) : void {
				fileReference.cancel();
			}
			
			private function dateLabel( item:Object, column:DataGridColumn):String {
				return df.format(item[column.dataField]);
			} 
			
			private function durationLabel(item:Object, column:DataGridColumn) : String {
				var duration: Number = item.t1.getTime() - item.t0.getTime();
				var seconds: Number = Math.floor(duration / 1000);
				var m: Number = Math.floor(seconds / 60);
				var s: Number = seconds - m * 60;
				return m + "m " + s + "s";
			} 
			
			private function click_save(event: Event) : void {
				for each (var session: Object in sessions) {
					if (session.save) {
						gpslogService.createGpslog(
							cb_riders.selectedItem.rider_id,
							cb_tracks.selectedItem.track_id,
							df_GpsLogDate.selectedDate,
							session.t0,
							session.t1,
							session.data
							);
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder id="findByLatLng" />
		<s:CallResponder id="findAllTracks"/>
		<s:CallResponder id="findAllRiders"/>
		<trackservice:TrackService 
			id="trackService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true" />
		<gpslogservice:GpslogService 
			id="gpslogService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true" />
		<riderservice:RiderService
			id="riderService"
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true" />
		<net:FileReference 
			id="fileReference"
			select="onSelect(event)"
			progress="onLoadProgress(event)"
			complete="onLoadComplete(event)"
			ioError="onLoadIoError(event)" />
		<mx:DateFormatter
			id="df"
			formatString="HH:NN" />
	</fx:Declarations>

		<mx:Form>
			
			<mx:FormItem label="Rider">
				<s:DropDownList id="cb_riders"
					width="160"
					dataProvider="{findAllRiders.lastResult}"
					creationComplete="findAllRiders.token = riderService.findAll();"
					labelField="firstname" />
			</mx:FormItem>
			
			<mx:FormItem label="Track">
				<s:DropDownList id="cb_tracks"
					width="160"
					dataProvider="{findAllTracks.lastResult}"
					creationComplete="findAllTracks.token = trackService.findAll();"
					labelField="name"
					selectedIndex="{findTrackIndex(findByLatLng.lastResult)}"/>
			</mx:FormItem>
			
			<mx:FormItem label="Date">
				<mx:DateField id="df_GpsLogDate"/>
			</mx:FormItem>

			<!--
			<mx:FormItem label="Organization">
				<mx:ComboBox />
			</mx:FormItem>
			
			<mx:FormItem label="Group">
				<mx:ComboBox />
			</mx:FormItem>
			-->
			
		</mx:Form>
		
		<mx:DataGrid
			id="dataGrid"
			dataProvider="{sessions}">
			<mx:columns>
				<mx:DataGridColumn 
					headerText="Save" 
					dataField="save" 
					width="40">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Box 
								width="100%" height="100%" 
								horizontalAlign="center"
								verticalAlign="middle">
								<mx:CheckBox
									click="data.save = !data.save"
									selected="{data.save}" />
							</mx:Box>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Start" dataField="startIndex" visible="false" />
				<mx:DataGridColumn headerText="End" dataField="endIndex" visible="false"/>
				<mx:DataGridColumn 
					width="64"
					headerText="From" 
					dataField="t0" 
					labelFunction="dateLabel" />
				<mx:DataGridColumn 
					width="64"
					headerText="To" 
					dataField="t1" 
					labelFunction="dateLabel" />
				<mx:DataGridColumn 
					width="64"
					headerText="Duration" 
					labelFunction="durationLabel" />
			</mx:columns>
		</mx:DataGrid>
		
		<mx:ProgressBar 
			id="progressBar" 
			mode="manual" 
			width="100%"/>

		<s:HGroup>
			
			<mx:Button 
				label="Load GPS log file" 
				click="click_load(event)"/>
			
			<mx:Button 
				label="Cancel" 
				click="click_cancel(event)"/>
		
			<mx:Button 
				label="Save sessions"
				click="click_save(event)"/>
			
		</s:HGroup>
		
</s:VGroup>
