<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo" 
	xmlns:net="flash.net.*"
	creationComplete="creationComplete()"
	xmlns:trackservice="services.trackservice.*" 
	xmlns:intersectionservice="services.intersectionservice.*" 
	xmlns:gpslogservice="services.gpslogservice.*">
	
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLngBounds;
			import valueObjects.Intersection;
			import mx.controls.Label;
			import mx.core.UITextField;
			import mx.binding.utils.BindingUtils;
			import mx.controls.Text;
			import util.IntersectionUtils;
			import mx.core.UIComponent;
			import mx.core.FlexSprite;
			import com.google.maps.LatLng;
			import mx.utils.ArrayUtil;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.AsyncToken;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.controls.Alert;
			import mx.messaging.AbstractConsumer;
			import __AS3__.vec.Vector;
			
			public var projection: Projection;

			public var dX: Number;
			public var dY: Number;
			public var d: Number;
			
			[Bindable] 
			private var commands: Vector.<int> = new Vector.<int>();

			[Bindable] 
			private var thedata: Vector.<Number> = new Vector.<Number>();
			
			[Bindable]
			private var intersections: ArrayCollection;
			
			public function creationComplete() : void {
				findSampleTrackData.token = gpslogService.findSampleTrackData(1);
				dataGrid_refresh();
			}
			
			public function dataReady(s: String) : void {
				var lines: Array = s.split("\n");
				var i: uint;
				
				var headings: Array = lines[0].split(",");
				//INDEX,RCR,DATE,TIME,VALID,LATITUDE,N/S,LONGITUDE,E/W,HEIGHT,SPEED,DISTANCE,
				var latIndex: uint = headings.indexOf("LATITUDE");
				var lngIndex: uint = headings.indexOf("LONGITUDE");
				var spdIndex: uint = headings.indexOf("SPEED");
				var timeIndex: uint = headings.indexOf("TIME");
				
				var bounds: LatLngBounds = new LatLngBounds();
				
				var points: Array = new Array();
				for (i = 1; i<lines.length; i++) {
					var line: String = lines[i];
					var values: Array = line.split(",");
					if (values.length >= 2) {
						var latLng: LatLng = new LatLng(values[latIndex], values[lngIndex]);
						bounds.extend(latLng);
						points.push(latLng);
					}
				}
				
				projection = new Projection();
				projection.bounds = bounds;
				projection.fit(640,480);
				
				thedata = new Vector.<Number>();
				for each (var ll: LatLng in points) {
					var p2: Point = projection.latLng2xy(ll);
					thedata.push(p2.x);
					thedata.push(p2.y);
				}

				commands = new Vector.<int>();
				commands.push(GraphicsPathCommand.MOVE_TO);
				for (i = 2; i < thedata.length; i += 2) {
					commands.push(GraphicsPathCommand.LINE_TO);
				}
				
				drawTrack();
			}
			
			public function drawTrack() :void {
				c1.removeAllChildren();
				c1.graphics.clear();
				c1.graphics.lineStyle(1,0,1);
				c1.graphics.drawPath(commands, thedata);
			}

			public function findNearest(event: MouseEvent) : void {
				var min: Number = Number.MAX_VALUE;
				var best: int = -1;
				
				for (var i:uint = 2; i < thedata.length-2; i += 2) {
					var cd: Number = (thedata[i] - event.localX) * (thedata[i] - event.localX)
						+ (thedata[i+1] - event.localY) * (thedata[i+1] - event.localY);
					if (cd < min) {
						min = cd;
						best = i;
					}
				}
				
				if (min <= 100) {
				
					var angle: Number = Math.atan2(thedata[best+3] - thedata[best-1], thedata[best+2] - thedata[best-2]);
					var latLng: LatLng = projection.xy2latLng(thedata[best], thedata[best+1]);

					var marker: IntersectionMarker = new IntersectionMarker();
					marker.latLng = latLng;
					marker.angle = angle;
					marker.labelText = "" + intersections.length;
					marker.parent = c1;
					marker.projection = projection;
					marker.draw();

					var intersection: Intersection = new Intersection();
					intersection.index = intersections.length;
					intersection.lat = latLng.lat();
					intersection.lng = latLng.lng();
					intersection.angle = angle;

					intersections.addItem(intersection);
				}
			}
			
			public function scan() : void {
				var s1: ArrayCollection = new ArrayCollection();
				for (var i:uint = 0; s1.length < intersections.length && i < thedata.length-2; i += 2) {
					var index: int = 0;
					for each (var intersection: Object in intersections) {
						var pt1: Point = new Point(thedata[i], thedata[i+1]);
						var pt2: Point = new Point(thedata[i+2], thedata[i+3]);
						var ip1: Point = new Point(intersection.marker.x1, intersection.marker.y1);
						var ip2: Point = new Point(intersection.marker.x2, intersection.marker.y2);
						if (IntersectionUtils.intersects(pt1, pt2, ip2, ip1)) {
							if (!s1.contains(intersection)) {
								s1.addItem(intersection);
							}
							trace("Intersection " + index + " " + i);
						}
						index++;
					}
				}
				for (i = 0; i < s1.length; i++) {
					var item: Object = s1.getItemAt(i);
					item.index = i;
					item.tf.text = "" + i;
					var tlm: TextLineMetrics = item.tf.measureText(item.tf.text);
					item.tf.x = item.x + 2.4 * item.vy - (tlm.width + 5) / 2;
					item.tf.y = item.y - 2.4 * item.vx - (tlm.height + 4) / 2;
				}
				intersections = s1;
			}
			
			public function click_remove() : void {
				var intersection: Object = dataGrid.selectedItem;

				var index: int = intersections.getItemIndex(intersection);
				intersections.removeItemAt(index);
			}

			protected function cb_tracks_creationCompleteHandler(event:FlexEvent):void {
				findAllResult.token = trackService.findAll();
			}
			
			public function fault(event : FaultEvent) : void {
				Alert.show("fault " + event.fault);
			}
			
			public function result_findByTrack(event : ResultEvent) : void {
				intersections = ArrayCollection(event.result);
			}
			
			protected function dataGrid_refresh():void {
				if (cb_tracks.selectedItem != null) {
					var track_id: int = cb_tracks.selectedItem.track_id;
					intersectionService.findByTrack(track_id).addResponder(new mx.rpc.Responder(
						result_findByTrack, fault));
					findSampleTrackData.token = gpslogService.findSampleTrackData(track_id);
				} else {
					dataGrid.dataProvider = new ArrayCollection();
					c1.graphics.clear();
				}
			}
			
			protected function click_save() : void {
				var track_id: int = cb_tracks.selectedItem.track_id;
				var ic: ArrayCollection = new ArrayCollection();
				for each (var intersection: Object in intersections) {
					var item: Intersection = new Intersection();
					item.lat = intersection.lat;
					item.lng = intersection.lng;
					item.angle = intersection.angle;
					ic.addItem(item);
				}
				intersectionService.updateByTrack(track_id, ic);
			}
			
			protected function click_showmarkers() : void {
				for each (var intersection: Object in intersections) {
					var marker: IntersectionMarker = new IntersectionMarker();
					marker.latLng = new LatLng(intersection.lat, intersection.lng);
					marker.angle = intersection.angle;
					marker.labelText = "" + intersection.index;
					marker.parent = c1;
					marker.projection = projection;
					marker.draw();
					//intersection.marker = marker;
				}

			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder 
			id="findAllResult" 
			result="cb_tracks.selectedIndex = 0"/>
		<trackservice:TrackService 
			id="trackService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true"/>
		<intersectionservice:IntersectionService 
			id="intersectionService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true"/>
		<s:CallResponder 
			id="findSampleTrackData" 
			result="dataReady(String(event.result))"/>
		<gpslogservice:GpslogService
			id="gpslogService" 
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
			showBusyCursor="true"/>
		<mx:RadioButtonGroup id="startFinishGroup" />
		<mx:NumberFormatter id="latLngFormatter" precision="6" />
	</fx:Declarations>
	
	<mx:Form>
		<mx:FormItem label="Track">
			<s:DropDownList
				id="cb_tracks" 
				width="160"
				creationComplete="cb_tracks_creationCompleteHandler(event)" 
				dataProvider="{findAllResult.lastResult}"
				change="dataGrid_refresh()"
				labelField="name"/>
		</mx:FormItem>
	</mx:Form>
	
	<mx:DataGrid 
		id="dataGrid" 
		creationComplete="dataGrid_refresh()" 
		dataProvider="{intersections}">
		<mx:columns>
			<mx:DataGridColumn headerText="intersection_id" dataField="intersection_id" visible="false"/>
			<mx:DataGridColumn headerText="Index" dataField="index" width="44"/>
			<mx:DataGridColumn headerText="Latitude" dataField="lat" width="80"/>
			<mx:DataGridColumn headerText="Longitude" dataField="lng" width="80"/>
			<mx:DataGridColumn headerText="Angle" dataField="angle" width="80"/>
			<mx:DataGridColumn headerText="track_id" dataField="track_id" visible="false"/>
		</mx:columns>
		
	</mx:DataGrid>
	
	<s:HGroup>
		<s:Button
			label="showMarkers"
			click="click_showmarkers()" />
		<s:Button 
			label="Remove"
			enabled="{dataGrid.selectedIndex >= 0}"
			click="click_remove()"/>
		<s:Button 
			label="Scan"
			click="scan()"/>
		<s:Button 
			label="Save"
			click="click_save()"/>
	</s:HGroup>
	
	<mx:Canvas 
		width="800" height="800" 
		id="c1" 
		mouseUp="findNearest(event);">
	</mx:Canvas>
	
	
</s:VGroup>
