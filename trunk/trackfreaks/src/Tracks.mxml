<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:trackservice="services.trackservice.*">

	<fx:Script>
		<![CDATA[
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.MapZoomEvent;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;

			import valueObjects.Track;

			private var oldZoomLevel: Number;

			public var bb: LatLngBounds;

			public var trackMarkers: ArrayCollection = new ArrayCollection();

			[Embed(source="assets/checkeredflag.png")]
			[Bindable]

			public var flag:Class;

			private function onMapReady(event:Event):void {
				with (this.map) {
					addControl(new ZoomControl());
					addControl(new PositionControl());
					addControl(new MapTypeControl());
					map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onMapZoomChanged, false, 0, true);

				}
				if (findAllResult.lastResult) {
					onBothReady();
				}
			}


			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void {
				findAllResult.token = trackService.findAll();
			}

			protected function onDataReady(event: Event) : void {
				if (this.map.isLoaded()) {
					onBothReady();
				}
			}

			protected function onBothReady() : void {
				bb = new LatLngBounds();
				trackMarkers = new ArrayCollection();
				for each (var track: Track in findAllResult.lastResult) {
					if (track.lat != 0  && track.lng != 0) {
						var latLng: LatLng = new LatLng(track.lat, track.lng);
						bb.extend(latLng);

						var marker: Marker = new Marker(
							latLng,
							new MarkerOptions({
								icon: new flag(),
								iconOffset: new Point(-13, -26)
							}));

						marker.addEventListener(MapMouseEvent.CLICK, onMarkerClick);
						this.map.addOverlay(marker);

						trackMarkers.addItem({track: track, marker: marker});
					}
				}
				var zoomLevel: Number = this.map.getBoundsZoomLevel(bb);
				this.map.setCenter(bb.getCenter(), zoomLevel, MapType.NORMAL_MAP_TYPE);
				oldZoomLevel = zoomLevel;
			}

			public function onMarkerClick(event: Event) : void {
				var marker: Marker = Marker(event.target);

				var track: Track = null;
				for each (var o: Object in trackMarkers) {
					if (o.marker == marker) {
						track = o.track;
						break;
					}
				}

				showInfoWindow(marker, track);

				dataGrid.selectedItem = track;
				dataGrid.scrollToIndex(dataGrid.selectedIndex);
			}

			protected function onItemClick(event: ListEvent) : void {
				var track: Track = Track(dataGrid.selectedItem);

				var marker: Marker = null;
				for each (var o: Object in trackMarkers) {
					if (o.track == track) {
						marker = o.marker;
						break;
					}
				}
				showInfoWindow(marker, track);

				if (event.columnIndex == 1) {
					navigateToURL(new URLRequest(track.url), "_blank");
				}

			}

			protected function showInfoWindow(marker: Marker, track: Track) : void {
				var trackInfoWindow: TrackInfoWindow = new TrackInfoWindow();
				trackInfoWindow.data = track;

				var infoWindowOptions: InfoWindowOptions = new InfoWindowOptions({
					customContent: trackInfoWindow,
					width: 160,
					drawDefaultFrame:true})

				marker.openInfoWindow(infoWindowOptions);
			}

			protected function zoomOut() : void {
				var zoomLevel: Number = this.map.getBoundsZoomLevel(bb);
				this.map.setCenter(bb.getCenter(), zoomLevel);
				oldZoomLevel = zoomLevel;
			}

			protected function zoomIn() : void {
				var track: Track = dataGrid.selectedItem as Track;
				var center: LatLng = new LatLng(track.lat, track.lng);
				var zoomLevel: Number = 14; //TODO: Zoom depending on track size
				this.map.setCenter(center, zoomLevel);
				oldZoomLevel = zoomLevel;
			}

			protected function onMapZoomChanged(event: MapZoomEvent) : void {
				if (oldZoomLevel < event.zoomLevel && dataGrid.selectedIndex >= 0) {
					var track: Track = dataGrid.selectedItem as Track;
					var center: LatLng = new LatLng(track.lat, track.lng);
					this.map.setCenter(center);
				}
				oldZoomLevel = event.zoomLevel;
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:CallResponder id="findAllResult" result="onDataReady(event)"/>
		<trackservice:TrackService
			id="trackService"
			fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
			showBusyCursor="true"/>
	</fx:Declarations>

	<s:BorderContainer>
		<maps:Map3D
			xmlns:maps="com.google.maps.*"
			id="map"
			mapevent_mapready="onMapReady(event)"
			width="640" height="480"
			key="ABQIAAAARHlxm1tnIyh53Qky1yRvaxQRM90ZMLGmypNtl0aCSyUOIyb2sxQJCMaQB88DzEFGpMHAzTs5sB2Wpw"/>
	</s:BorderContainer>

	<s:HGroup width="100%">
		<s:Button
			label="Overview"
			click="zoomOut();" />
		<s:Button
			label="Track"
			enabled="{dataGrid.selectedIndex >= 0}"
			click="zoomIn();"/>
	</s:HGroup>

	<mx:DataGrid
		id="dataGrid"
		width="640"
		creationComplete="dataGrid_creationCompleteHandler(event)"
		dataProvider="{findAllResult.lastResult}"
		rowCount="5"
		itemClick="onItemClick(event);">
		<mx:columns>
			<mx:DataGridColumn headerText="track_id" dataField="track_id" visible="false"/>
			<mx:DataGridColumn headerText="Name" dataField="name" width="140"/>
			<mx:DataGridColumn headerText="URL" dataField="url"/>
			<mx:DataGridColumn headerText="Length" dataField="length" width="60"/>
			<mx:DataGridColumn headerText="Country" dataField="country" width="80"/>
			<mx:DataGridColumn headerText="Latitude" dataField="lat" width="80"/>
			<mx:DataGridColumn headerText="Longitude" dataField="lng" width="80"/>
		</mx:columns>
	</mx:DataGrid>

</s:VGroup>
