<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:net="flash.net.*"
	creationComplete="creationComplete()"
	xmlns:trackservice="services.trackservice.*"
	xmlns:intersectionservice="services.intersectionservice.*">

	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLngBounds;
			import valueObjects.Intersection;
			import util.IntersectionUtils;
			import com.google.maps.LatLng;
			import mx.utils.ArrayUtil;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.events.FlexEvent;
			import mx.controls.Alert;
			import __AS3__.vec.Vector;

			public var projection: Projection;

			[Bindable]
			private var commands: Vector.<int> = new Vector.<int>();

			[Bindable]
			private var thedata: Vector.<Number> = new Vector.<Number>();

			[Bindable]
			private var intersections: ArrayCollection;

			private var markers: ArrayCollection;

			public function creationComplete() : void {
				dataGrid_refresh();
			}

			public function dataReady(s: String) : void {
				if (s != null) {
					var lines: Array = s.split("\n");
					var i: int;

					var headings: Array = lines[0].split(",");
					var latIndex: uint = headings.indexOf("LATITUDE");
					var lngIndex: uint = headings.indexOf("LONGITUDE");

					var bounds: LatLngBounds = new LatLngBounds();

					var points: Array = new Array();
					for (i = 1; i<lines.length; i++) {
						var line: String = lines[i];
						var values: Array = line.split(",");
						if (values.length >= 2) {
							var latLng: LatLng = new LatLng(values[latIndex], values[lngIndex]);
							bounds.extend(latLng);
							points.push(latLng);
						}
					}

					projection = new Projection();
					projection.bounds = bounds;
					projection.fit(640,640);

					thedata = new Vector.<Number>();
					for each (var ll: LatLng in points) {
						var p2: Point = projection.latLng2xy(ll);
						thedata.push(p2.x);
						thedata.push(p2.y);
					}

					commands = new Vector.<int>();
					commands.push(GraphicsPathCommand.MOVE_TO);
					for (i = 2; i < thedata.length; i += 2) {
						commands.push(GraphicsPathCommand.LINE_TO);
					}

					c1.removeAllChildren();
					c1.graphics.clear();
					c1.graphics.lineStyle(1,0,1);
					c1.graphics.drawPath(commands, thedata);
				} else {
					thedata = new Vector.<Number>();
					commands = new Vector.<int>();
					c1.removeAllChildren();
					c1.graphics.clear();
				}
			}

			public function findNearest(event: MouseEvent) : void {
				var min: Number = Number.MAX_VALUE;
				var best: int = -1;

				for (var i:uint = 2; i < thedata.length-2; i += 2) {
					var cd: Number = (thedata[i] - event.localX) * (thedata[i] - event.localX)
						+ (thedata[i+1] - event.localY) * (thedata[i+1] - event.localY);
					if (cd < min) {
						min = cd;
						best = i;
					}
				}

				if (min <= 100) {

					var angle: Number = Math.atan2(thedata[best+3] - thedata[best-1], thedata[best+2] - thedata[best-2]);
					var latLng: LatLng = projection.xy2latLng(thedata[best], thedata[best+1]);

					var marker: IntersectionMarker = new IntersectionMarker();
					marker.latLng = latLng;
					marker.angle = angle;
					marker.labelText = "" + intersections.length;
					marker.parent = c1;
					marker.projection = projection;
					marker.draw();

					markers.addItem(marker);

					var intersection: Intersection = new Intersection();
					intersection.index = intersections.length;
					intersection.lat = latLng.lat();
					intersection.lng = latLng.lng();
					intersection.angle = angle;

					intersections.addItem(intersection);

					scan();
				}
			}

			public function scan() : void {
				var i: int;
				var ii: int;
				var s1: ArrayCollection;

				s1 = new ArrayCollection();
				s1.addAll(markers);
				i = 0;
				while (s1.length > 0 && i < thedata.length-2) {
					for (ii = s1.length - 1; ii >= 0; ii--) {
						var marker: IntersectionMarker = IntersectionMarker(s1.getItemAt(ii));
						var pt1: Point = new Point(thedata[i], thedata[i+1]);
						var pt2: Point = new Point(thedata[i+2], thedata[i+3]);
						var ip1: Point = new Point(marker.x1, marker.y1);
						var ip2: Point = new Point(marker.x2, marker.y2);
						if (IntersectionUtils.intersects(pt1, pt2, ip2, ip1)) {
							s1.removeItemAt(ii);
						}
					}
					i += 2;
				}

				var ni: ArrayCollection = new ArrayCollection();
				var nm: ArrayCollection = new ArrayCollection();
				var index: int = 0;
				while (markers.length > 0 && i < thedata.length-2) {
					for (ii = markers.length - 1; ii >= 0; ii--) {
						marker = IntersectionMarker(markers.getItemAt(ii));
						pt1 = new Point(thedata[i], thedata[i+1]);
						pt2 = new Point(thedata[i+2], thedata[i+3]);
						ip1 = new Point(marker.x1, marker.y1);
						ip2 = new Point(marker.x2, marker.y2);
						if (IntersectionUtils.intersects(pt1, pt2, ip2, ip1)) {
							markers.removeItemAt(ii);
							marker.labelText = "" + index;
							marker.draw();
							nm.addItem(marker);
							var intersection: Intersection = Intersection(intersections.removeItemAt(ii));
							intersection.index = index;
							ni.addItem(intersection);
							index++;
						}
					}
					i += 2;
				}

				markers = nm;
				intersections = ni;
			}

			public function click_remove() : void {
				var intersection: Object = dataGrid.selectedItem;

				var index: int = intersections.getItemIndex(intersection);
				intersections.removeItemAt(index);
				var marker: IntersectionMarker = IntersectionMarker(markers.removeItemAt(index));
				marker.destroy();
				scan();
			}

			public function click_remove_all() : void {
				intersections = new ArrayCollection();
				for each (var marker: IntersectionMarker in markers) {
					marker.destroy();
				}
				markers = new ArrayCollection();
			}

			protected function cb_tracks_creationCompleteHandler(event:FlexEvent):void {
				findAllResult.token = trackService.findAll();
			}

			public function fault(event : FaultEvent) : void {
				Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)
			}

			public function result_findByTrack(event : ResultEvent) : void {
				dataReady(event.result.data);
				intersections = new ArrayCollection(event.result.intersections);
				showmarkers();
			}

			protected function dataGrid_refresh():void {
				if (cb_tracks.selectedItem != null) {
					var track_id: int = cb_tracks.selectedItem.track_id;
					findByTrack.token = intersectionService.findByTrack(track_id);
				} else {
					dataGrid.dataProvider = new ArrayCollection();
					c1.graphics.clear();
				}
			}

			protected function click_save() : void {
				var track_id: int = cb_tracks.selectedItem.track_id;
				var ic: ArrayCollection = new ArrayCollection();
				for each (var intersection: Object in intersections) {
					var item: Intersection = new Intersection();
					item.lat = intersection.lat;
					item.lng = intersection.lng;
					item.angle = intersection.angle;
					ic.addItem(item);
				}
				intersectionService.updateByTrack(track_id, ic);
			}

			protected function showmarkers() : void {
				markers = new ArrayCollection();
				for each (var intersection: Object in intersections) {
					var marker: IntersectionMarker = new IntersectionMarker();
					marker.latLng = new LatLng(intersection.lat, intersection.lng);
					marker.angle = intersection.angle;
					marker.labelText = "" + intersection.index;
					marker.parent = c1;
					marker.projection = projection;
					marker.draw();
					markers.addItem(marker);
				}

			}

			protected function labelFunction(item:Object, column:DataGridColumn): String {
				return latLngFormatter.format(item[column.dataField]);
			}

			protected function zoomSlider_changeHandler(event:Event):void {
				var scaleFactor: Number = zoomSlider.value;
				c1.scaleX = scaleFactor;
				c1.scaleY = scaleFactor;
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:CallResponder
			id="findByTrack"
			fault="fault(event)"
			result="result_findByTrack(event)"/>
		<s:CallResponder
			id="findAllResult"
			fault="fault(event)"
			result="cb_tracks.selectedIndex = 0"/>
		<trackservice:TrackService
			id="trackService"
			fault="fault(event)"
			showBusyCursor="true"/>
		<intersectionservice:IntersectionService
			id="intersectionService"
			fault="fault(event)"
			showBusyCursor="true"/>
		<mx:NumberFormatter id="latLngFormatter" precision="6" />
		<mx:DateFormatter id="timeFormatter" formatString="NN:SS.QQQ" />
	</fx:Declarations>

	<s:VGroup>

		<mx:Form>
			<mx:FormItem label="Track">
				<s:DropDownList
					id="cb_tracks"
					width="160"
					creationComplete="cb_tracks_creationCompleteHandler(event)"
					dataProvider="{findAllResult.lastResult}"
					change="dataGrid_refresh()"
					labelField="name"/>
			</mx:FormItem>
		</mx:Form>

		<mx:DataGrid
			id="dataGrid"
			creationComplete="dataGrid_refresh()"
			dataProvider="{intersections}">
			<mx:columns>
				<mx:DataGridColumn
					headerText="Index"
					dataField="index"
					width="44"/>
				<mx:DataGridColumn
					headerText="Latitude"
					dataField="lat"
					width="80"
					labelFunction="labelFunction"/>
				<mx:DataGridColumn
					headerText="Longitude"
					dataField="lng"
					width="80"
					labelFunction="labelFunction"/>
				<mx:DataGridColumn
					headerText="Angle"
					dataField="angle"
					width="80"
					labelFunction="labelFunction"/>
			</mx:columns>
		</mx:DataGrid>

		<s:HGroup>
			<s:Button
				label="Reload"
				click="dataGrid_refresh()"/>
			<s:Button
				label="Remove all"
				enabled="{intersections.length >= 0}"
				click="click_remove_all()"/>
			<s:Button
				label="Remove"
				enabled="{dataGrid.selectedIndex >= 0}"
				click="click_remove()"/>
			<s:Button
				label="Save"
				click="click_save()"/>
		</s:HGroup>

	</s:VGroup>

	<s:VGroup>

		<s:BorderContainer>
			<s:Scroller
				verticalScrollPolicy="on"
				horizontalScrollPolicy="on">
				<s:Group
					width="640" height="640">
					<mx:Canvas
						verticalScrollPolicy="off"
						horizontalScrollPolicy="off"
						width="640" height="640"
						id="c1"
						mouseUp="findNearest(event);">
					</mx:Canvas>
				</s:Group>
			</s:Scroller>
		</s:BorderContainer>

		<s:HGroup>
			<s:Label text="Zoom" />
			<s:HSlider
				id="zoomSlider"
				change="zoomSlider_changeHandler(event)"
				minimum="1"
				maximum="4"
				stepSize="0.1" snapInterval="0.1"/>
		</s:HGroup>

	</s:VGroup>

</s:HGroup>
